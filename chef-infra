#!/bin/bash
# Author: Mike Tyler - mtyler - mtyler@chef.io
# Purpose: Stand up an Automate v2.0 evaluation environment

#
# Static Variables
#
WKDIR=$PWD
GUEST_WKDIR='/opt/a2-testing'
#
# helper functions
#
usage() {
  echo "Usage: $0 [command] [options]"
  echo ""
  echo "Available Commands:"
  echo "    setup"
  echo "    build"
  echo "    backup"
  echo "    restore"
  echo "    teardown"
  echo "    troubleshoot"
  echo ""
  echo "  options:"
  echo "  -h,--help    show this message"
  echo ""
  echo "setup: Creat a local Chef Infrastructure"
  echo ""
  echo "  options:"
  echo "  -c, --count requires an integer. Number of nodes to include in the fleet (default: 2)"
  echo ""
  echo "build: Create/overwrite local files: Vagrantfile,"
  echo "              knife.rb, base.rb, etc."
  echo ""
  echo "backup: create snapshots of Automate and Chef Server"
  echo ""
  echo "restore: Restore to the latest backup, if one exists"
  echo "  options:"
  echo "  -a, --automate Directory in ./bkps/a2 containing Automate backup (default: latest modified)"
  echo "  -s, --server Directory in ./bkps/srvr containing Chef Server backup (default: latest modified)"
  echo ""
  echo "teardown: Remove files and objects created"
  echo "  options:"
  echo "  -b,--backup  Create a backup before tearing down. Pointless to use with -f"
  echo "  -f,--full    Remove .deb packages. The process downloads and creates .deb"
  echo "               packages. For convienience and speed, these are not removed"
  echo "               by default."
  echo "  -p,--pretend just list what will be done"
  echo "  -y,--yes     answer yes to all prompts"
  echo ""
  echo "troubleshoot: Print useful cmds"

  exit 0;
}

do_error() {
  echo ""
  echo "ERROR: ${1}"
  echo ""
  echo ""
  do_end
  exit 1
}
#
# append to /etc/hosts file
#
add_host() {
  if [ -n "$(grep "$2" /etc/hosts)" ]; then
    echo "$2, already exists";
  else
    echo "adding $2 to /etc/hosts";
    printf "%s\t%s\n" "$1" "$2" | sudo tee -a "/etc/hosts" > /dev/null;
  fi
}
#
# remove from /etc/hosts file
#
remove_host() {
  if [ -n "$(grep "$1" /etc/hosts)" ]; then
    echo "$1 found in /etc/hosts. Removing now..."
    if ! $2 ; then
      sudo sed -ie "/$1/d" "/etc/hosts"
    fi
  else
    echo "$1 was not found in /etc/hosts"
  fi
}
#
# create base role
# This functionality was put in a role for simplicity, in a production scenario
# consider using a wrapper cookbook.
create_base_rb() {
    mkdir -p $WKDIR/roles && cat > $WKDIR/roles/base.rb <<EOL
name "base"
description "baseline config"
run_list(
  "recipe[audit::default]"
)
default_attributes(
  "audit": {
    "reporter": "chef-server-automate",
    "profiles": [
      {
        "name": "DevSec Linux Security Baseline",
        "compliance": "admin/linux-baseline"
      }
    ]
  }
)
EOL
}
#
# create local knife config
#
create_knife_rb() {
    mkdir -p $WKDIR/.chef && cat > $WKDIR/.chef/knife.rb <<EOL
current_dir = File.dirname(__FILE__)
node_name                "admin"
client_key               "../.chef/admin.pem"
validation_client_name   "a2-validator"
validation_key           "../.chef/a2-validator.pem"
chef_server_url          "https://chef-server.test/organizations/a2"
cookbook_path            ["#{current_dir}/../cookbooks"]
EOL
}
#
# create Vagrantfile
#
create_vagrantfile() {
    cat > $WKDIR/Vagrantfile <<EOL
# -*- mode: ruby -*-
# vi: set ft=ruby :

# this is set high to give some flexiblity.
# ideally this should be passed from an environment var
NODE_COUNT = 10

Vagrant.configure(2) do |config|

  config.vm.define :a2 do |a2|
    a2.vm.provider "virtualbox" do |v|
      v.memory = 2048
      v.cpus = 2
    end
    a2.vm.box = "bento/ubuntu-16.04"
    a2.vm.synced_folder ".", "${GUEST_WKDIR}", create: true
    a2.vm.hostname = 'automate-deployment.test'
    a2.vm.network 'private_network', ip: '192.168.33.199'
    a2.vm.boot_timeout = 600
    a2.vm.provision "shell", inline: "apt-get update && apt-get install -y unzip ntp"
    a2.vm.provision "shell", inline: "sysctl -w vm.max_map_count=262144"
    a2.vm.provision "shell", inline: "sysctl -w vm.dirty_expire_centisecs=20000"
    a2.vm.provision "shell", inline: "echo 192.168.33.199 automate-deployment.test | sudo tee -a /etc/hosts"
    a2.vm.provision "shell", inline: "cd /home/vagrant && curl -s https://packages.chef.io/files/current/automate/latest/chef-automate_linux_amd64.zip |gunzip - > chef-automate && chmod +x chef-automate"
    a2.vm.provision "shell", inline: "sudo ./chef-automate init-config"
    a2.vm.provision "shell", inline: "sudo ./chef-automate deploy config.toml --accept-terms-and-mlsa --skip-preflight"
    a2.vm.provision "shell", inline: "if [ -f ${GUEST_WKDIR}/automate.license ]; then sudo ./chef-automate license apply \$(< ${GUEST_WKDIR}/automate.license) && sudo ./chef-automate license status ; fi"
    a2.vm.provision "shell", inline: "sudo ./chef-automate admin-token > ${GUEST_WKDIR}/a2-token"
  end

  config.vm.define :srvr do |srvr|
    srvr.vm.provider "virtualbox" do |vb|
      vb.memory = 512
      vb.cpus = 2
    end
    srvr.vm.box = "bento/ubuntu-16.04"
    srvr.vm.hostname = "chef-server.test"
    srvr.vm.synced_folder ".", "${GUEST_WKDIR}", create: true
    srvr.vm.network :private_network, ip: "192.168.33.200"
    srvr.ssh.username = "vagrant"
    srvr.ssh.password = "vagrant"
    srvr.vm.provision "shell", inline: "echo 192.168.33.199 automate-deployment.test | sudo tee -a /etc/hosts"
    srvr.vm.provision "shell", inline: "echo 192.168.33.200 chef-server.test | sudo tee -a /etc/hosts"
    srvr.vm.provision "shell", inline: "if [ ! -f ${GUEST_WKDIR}/pkgs/srvr/*.deb ]; then mkdir -p ${GUEST_WKDIR}/pkgs/srvr; cd ${GUEST_WKDIR}/pkgs/srvr; wget -q https://packages.chef.io/files/stable/chef-server/12.17.33/ubuntu/16.04/chef-server-core_12.17.33-1_amd64.deb; fi"
    srvr.vm.provision "shell", inline: "dpkg -i ${GUEST_WKDIR}/pkgs/srvr/*.deb && sudo chef-server-ctl reconfigure"
    srvr.vm.provision "shell", inline: "if [ \"\$(sudo chef-server-ctl user-show | grep 'admin')\" == \"\" ]; then sudo chef-server-ctl user-create admin first last admin@example.com 'adminpwd' --filename ${GUEST_WKDIR}/.chef/admin.pem; fi"
    srvr.vm.provision "shell", inline: "if [ \"\$(sudo chef-server-ctl org-show | grep 'a2')\" == \"\" ]; then sudo chef-server-ctl org-create a2 'automate2' --association_user admin --filename ${GUEST_WKDIR}/.chef/a2-validator.pem; fi"
    srvr.vm.provision "shell", inline: "while [ ! -f ${GUEST_WKDIR}/a2-token ] ; do sleep 5 && echo '.'; done && sudo chef-server-ctl set-secret data_collector token \$(< ${GUEST_WKDIR}/a2-token) && sudo chef-server-ctl restart nginx && sudo chef-server-ctl restart opscode-erchef"
    srvr.vm.provision "shell", inline: "echo \"data_collector['root_url'] = 'https://automate-deployment.test/data-collector/v0/'\" | sudo tee -a /etc/opscode/chef-server.rb"
    srvr.vm.provision "shell", inline: "echo \"profiles['root_url'] = 'https://automate-deployment.test'\" | sudo tee -a /etc/opscode/chef-server.rb"
    srvr.vm.provision "shell", inline: "sudo chef-server-ctl reconfigure"
  end

  NODE_COUNT.times do |i|
    node_id = "node1#{i}"
    config.vm.define node_id do |node|
      node.vm.provider "virtualbox" do |vb|
        vb.memory = 512
        vb.cpus = 2
      end
      node.vm.box = "bento/ubuntu-16.04"
      node.vm.hostname = "#{node_id}.test"
      node.vm.synced_folder ".", "${GUEST_WKDIR}", create: true
      node.vm.network :private_network, ip: "192.168.33.1#{i}"
      node.ssh.username = "vagrant"
      node.ssh.password = "vagrant"
      node.vm.provision "shell", inline: "echo 192.168.33.200 chef-server.test | sudo tee -a /etc/hosts"
      node.vm.provision "shell", inline: "echo 192.168.33.1#{i} #{node_id}.test | sudo tee -a /etc/hosts"
      node.vm.provision "shell", inline: "if [ ! -f ${GUEST_WKDIR}/pkgs/client/*.deb ]; then mkdir -p ${GUEST_WKDIR}/pkgs/client; cd ${GUEST_WKDIR}/pkgs/client; wget -q https://packages.chef.io/files/stable/chef/14.1.12/ubuntu/16.04/chef_14.1.12-1_amd64.deb; fi"
      node.vm.provision "shell", inline: "dpkg -i ${GUEST_WKDIR}/pkgs/client/*.deb"
      node.vm.provision "shell", inline: "sudo mkdir -p /etc/chef && cat >/etc/chef/client.rb <<EOL
log_level        :info
log_location     STDOUT
chef_server_url  'https://chef-server.test/organizations/a2'
validation_client_name 'a2-validator'
validation_key '${GUEST_WKDIR}/.chef/a2-validator.pem'
client_key '/etc/chef/client.pem'
ssl_verify_mode  :verify_none
EOL"
      node.vm.provision "shell", inline: "sudo /usr/bin/chef-client -r 'role[base]'"
      node.vm.provision "shell", inline: "(crontab -l 2>/dev/null; echo \"*/5 * * * * sudo /usr/bin/chef-client >/dev/null 2>&1\") | crontab -"
    end
  end

  config.vm.define :work do |work|
    work.vm.provider "virtualbox" do |vb|
      vb.memory = 512
      vb.cpus = 2
    end
    work.vm.box = "bento/ubuntu-16.04"
    work.vm.hostname = "workstation.test"
    work.vm.synced_folder ".", "${GUEST_WKDIR}", create: true
    work.vm.network :private_network, ip: "192.168.33.198"
    work.ssh.username = "vagrant"
    work.ssh.password = "vagrant"
    work.vm.provision "shell", inline: "wget -q https://packages.chef.io/files/stable/chef-workstation/0.1.120/ubuntu/16.04/chef-workstation_0.1.120-1_amd64.deb && sudo dpkg -i chef*.deb"
    work.vm.provision "shell", inline: "chef-run -v"
  end

end
EOL
}

create_helpers() {
  cat > rm-node <<EOL
#!/bin/bash
if [ "\$1" == "" ] ;
then
  echo "Specify a node name"
  exit
fi
knife node delete \$1
knife client delete \$1
vagrant destroy \$1 -f
EOL
  chmod +x rm-node
}

do_build() {
  echo "Creating knife.rb..."
  create_knife_rb
  echo "Creating roles/base.rb..."
  create_base_rb
  echo "Creating Vagrantfile..."
  create_vagrantfile 2>/dev/null
  echo "Creating helper scripts..."
  create_helpers
}

#
# set up Host/Local Dev/Workstation
#
do_local_setup() {
  echo "Setting up Host/Local Dev/Workstation..."
  echo "Configuring knife.rb..."
  if [ -f $WKDIR/.chef/knife.rb ] ; then
    echo "knife.rb exists.  Nothing to do here."
  else
    create_knife_rb
    knife ssl fetch
  fi
  echo "knife.rb complete."

  # upload cookbooks
  echo "Uploading cookbooks..."
  mkdir -p $WKDIR/cookbooks && cd $WKDIR/cookbooks
  ckbks=(audit)
  for c in $ckbks; do
    if [ "$( knife cookbook list | grep $c )" == "" ]; then
      knife cookbook site download $c
      tar -xzvf $c*.tar.gz
      knife cookbook upload $c
    else
      echo "$c exists. Nothing to do here."
    fi
  done
  echo "Cookbook upload complete."

  echo "Uploading Roles..."
  cd $WKDIR
  if [ -f $WKDIR/roles/base.rb ] ; then
    echo "base.rb exists.  Nothing to do here."
  else
    create_base_rb
    knife role from file base.rb
  fi
  echo "base.rb complete."
  knife cookbook list >/dev/tty 2>&1
  knife status >/dev/tty 2>&1
  echo "setting up Host/Local Dev/Workstation complete."
}
#
# set up managed nodes
# $1 = node count
do_node_setup() {
  echo "Setting up managed nodes..."
  for (( i=0; i<$1; i++ ))
  do
    if [ "$(vagrant status node1$i | grep 'running (virtualbox)')" == "" ];
    then
      vagrant up node1$i >/dev/tty 2>&1
    else
      echo "node1$i is running. Nothing to do here."
    fi
    add_host 192.168.33.1$i node1$i.test
  done
  echo "Managed nodes set up complete."
}

#
# test setup
do_test() {
  echo "Begin testing setup..."
  # check for local setup
  if [ ! -f $WKDIR/.chef/knife.rb ] ; then do_error "knife.rb doesn't exist" ; fi
  # test for a functioning chef-server
  if [[ ! "$(vagrant ssh srvr -c 'hostname -f')" = *"chef-server.test"* ]] ; then do_error "chef-server setup not complete" ; fi
  # test for a functioning automate
  if [[ ! "$(vagrant ssh a2 -c 'hostname -f')" = *"automate-deployment.test"* ]] ; then do_error "automate setup not complete" ; fi
  # test for a validator client proving correct knife config and a working chef-server
  if [[ ! "$(knife client list)" = *"a2-validator"* ]] ; then do_error "a2-validator doesn't exist, something went wrong" ; fi
  echo "Testing complete."
}
#
# Begin setup
# the purpose of this file is to be the entry point for setting up a
# local test/evaluation environment for Chef Automate v2
#
do_setup() {
  echo "Begin Chef Infrastructure setup..."
  echo "Creating Vagrantfile..."
  if [ -f $WKDIR/Vagrantfile ] ; then
    echo "Vagrantfile exists.  Nothing to do here."
  else
    create_vagrantfile 2>/dev/null
  fi
  echo "Vagrantfile complete."
  # add chef dir here
  mkdir -p $WKDIR/.chef
  #######do_build
  echo "Setting up Automate and Chef Server..."
  # Check status of Automate
  a2_mode='provision'
  if [ "$(vagrant status a2 | grep 'running (virtualbox)')" == "" ]; then a2_mode='up' ; fi
  # Check status of Chef Server
  srvr_mode='provision'
  if [ "$(vagrant status srvr | grep 'running (virtualbox)')" == "" ]; then srvr_mode='up' ; fi
  # clean up any last_run leftovers that will get in the way
  vagrant $a2_mode a2 >/dev/tty 2>&1 &
  vagrant $srvr_mode srvr >/dev/tty 2>&1 &
  wait

  if [ ! -f $WKDIR/a2-token ] ; then do_error "a2-token doesn't exist"; fi
  add_host 192.168.33.200 chef-server.test
  add_host 192.168.33.199 automate-deployment.test
  echo "Automate and Chef Server set up complete."

  #make baseline profile available with an API call to Automate
  curl -d '{"name": "linux-baseline", "version": "2.2.0"}' -H "Content-Type: application/json" -H "api-token: $(<./a2-token)" -X POST 'https://automate-deployment.test/api/v0/compliance/profiles?owner=admin' --insecure

  do_local_setup
  do_node_setup $cnt
  do_test
  # wrap up and repeat the user instructions that are buried in the logs
  echo "*******************************************************************"
  echo ""
  echo "To login to Chef Automate, use the following credentials"
  vagrant ssh a2 -c "sudo cat ./automate-credentials.toml" >/dev/tty 2>&1
  echo ""
  echo "cleanup using chef-infra teardown"
  echo ""
  echo "Chef Infrastructure setup completed."
  echo "*******************************************************************"
}

do_backup() {
  echo "Begin taking backups..."
  d=`date '+%Y%m%d%H%M%S'`
  mkdir -p $WKDIR/bkps/srvr
  mkdir -p $WKDIR/bkps/a2
  mkdir -p $WKDIR/bkps/keys
  # backup keys
  mkdir -p $WKDIR/bkps/keys/$d
  cp $WKDIR/.chef/*.pem $WKDIR/bkps/keys/$d
  # backup chef server
  vagrant ssh srvr -c "sudo /opt/opscode/embedded/bin/knife ssl fetch https://chef-server.test && sudo /opt/opscode/embedded/bin/knife ec backup ${GUEST_WKDIR}/bkps/srvr/${d} -s https://chef-server.test --user pivotal --key /etc/opscode/pivotal.pem"
  # backup automate
  vagrant ssh a2 -c "if [ ! -f backup_config.toml ]; then sudo printf \"[global.v1.backups.filesystem]\npath = '${GUEST_WKDIR}/bkps/a2'\n\" > backup_config.toml && sudo ./chef-automate config patch backup_config.toml; fi && sudo ./chef-automate backup create"
  echo "Backups complete."
}

do_restore() {
  # there is NO validation that the backups are in sync
  # the assumption is that the last modified directories go together

  echo "Begin restore..."
  # check for cli arguments
  if [ "x$keys_bak" = "x" ]; then keys_bak=`ls -tr $WKDIR/bkps/keys | tail -1` ; fi
  if [ "x$srvr_bak" = "x" ]; then srvr_bak=`ls -tr $WKDIR/bkps/srvr | tail -1` ; fi
  if [ "x$a2_bak" = "x" ]; then a2_bak=`ls -tr $WKDIR/bkps/a2 | tail -1` ; fi
  echo "Restoring keys from: ${keys_bak}"
  echo "Restoring Chef Server from: ${srvr_bak}"
  echo "Restoring Automate from: ${a2_bak}"
  # validate backup directories exist
  if [ ! -d $WKDIR/bkps/keys/$keys_bak ]; then do_error "keys do not exist. Look in ${WKDIR}/keys and try again." ; fi
  if [ ! -d $WKDIR/bkps/srvr/$srvr_bak ]; then do_error "Chef Server Backup does not exist. Look in ${WKDIR}/bkps and try again." ; fi
  if [ ! -d $WKDIR/bkps/a2/$a2_bak ]; then do_error "Automate Backup does not exist. Look in ${WKDIR}/bkps and try again." ; fi
  # restore keys
  cp $WKDIR/bkps/keys/$keys_bak/*.pem $WKDIR/.chef
  # restore chef server
  vagrant ssh srvr -c "sudo /opt/opscode/embedded/bin/knife ssl fetch https://chef-server.test && sudo /opt/opscode/embedded/bin/knife ec restore ${GUEST_WKDIR}/bkps/srvr/${srvr_bak} -s https://chef-server.test --user pivotal --key /etc/opscode/pivotal.pem"
  # restore automate
  vagrant ssh a2 -c "sudo ./chef-automate backup restore $a2_bak"
  echo "Restore complete."
}

do_teardown() {
  echo "Begin Chef Infrastructure teardown"
  if $is_pre ; then echo "-p specified. Only printing actions of this script..." ; fi
  echo "create temporary removing dir..."
  if ! $is_pre ; then mkdir -p removing ; fi

  remove_host automate-deployment.test $is_pre
  remove_host chef-server.test $is_pre
  #TODO remove nodeX.test

  if $is_full ; then
    echo "clear contents of add.license.etc..."
    echo "delete binaries ./chef-dk, *.deb and Backups..."
    if ! $is_pre ; then
      # directory containing compiled archlinux chef-dk package
      mv ./pkgs ./removing
      mv ./bkps ./removing
    fi
    echo "delete helper scripts..."
    if ! $is_pre ; then mv rm-node ./removing ; fi
  fi

  echo "remove token file..."
  if ! $is_pre ; then mv -f a2-token ./removing ; fi
  echo "remove files from .chef..."
  if ! $is_pre ; then mv -f ./.chef ./removing ; fi
  echo "remove ./cookbooks dir..."
  if ! $is_pre ; then mv -f ./cookbooks ./removing ; fi
  echo "remove ./roles dir..."
  if ! $is_pre ; then mv -f ./roles ./removing ; fi

# make sure user really wants to delete if they did
# not pass cli argument -y
  if ! $is_yes ;
  then
    while true; do
      read -p "Do you really want to clean up? (y/n)" yn
      case $yn in
          [Yy]* ) break;;
          [Nn]* )
            echo "Ok. Stopping now."
            if ! $is_pre ; then echo "Recovery can be done manually by moving files out of ./removing" ; fi
            exit;;
          * ) echo "Please answer yes or no.";;
      esac
    done
  fi

  echo "vagrant destroy -f removing these vms..."
  vagrant status >/dev/tty 2>&1
  if ! $is_pre ; then vagrant destroy -f ; fi
  echo "remove Vagrantfile..."
  if ! $is_pre ; then rm -f Vagrantfile ./removing ; fi
  echo "remove ./vagrant dir..."
  if ! $is_pre ; then mv -f ./.vagrant ./removing ; fi
  echo "nuke the temporary ./removing dir..."
  if ! $is_pre ; then rm -rf ./removing ; fi
  echo " "
  echo "Teardown of Chef Infrastructure complete. Thanks for playing... :)"
}

do_troubleshoot() {
  echo ""
  echo "Helpful troubleshooting"
  echo ""
  echo "View Automate Log: journalctl -u chef-automate"
  echo "Tail Automate Log: journalctl -u chef-automate -f"
}

do_end() {
  # finish up with some metrics
  end=`date +%s`
  runtime=$((end-$START))
  echo ""
  echo "script completed in $runtime seconds"
}

#
# Begin chef-infra.sh
#
# initalize default flags
cnt=2
is_full=false
is_yes=false
is_pre=false

# record to print elapsed time
START=`date +%s`

# parse first argument
case $1 in
  setup)
    shift
    while getopts ":c:h" o; do
      case $o in
        c|count )
          cnt=$OPTARG
          echo "Create $cnt nodes"
          ;;
        h|help )
          usage
          ;;
        * )
          usage
          ;;
      esac
    done
    do_setup
    ;;
  build )
    shift
    do_build
    ;;
  backup )
    shift
    do_backup
    ;;
  restore )
    shift
    while getopts ":s:a:h" o; do
      case $o in
        a|automate )
          a2_bak=$OPTARG
          shift
          ;;
        k|keys )
          keys_bak=$OPTARG
          shift
          ;;
        s|server )
          srvr_bak=$OPTARG
          shift
          ;;
        h|help )
          usage
          ;;
        * )
          usage
          ;;
      esac
    done
    do_restore
    ;;
  teardown )
    shift
    while getopts ":pyfh" o; do
      case $o in
        b|backup )
          do_backup
          ;;
        f|full )
          is_full=true
          ;;
        p|pretend )
          is_pre=true
          ;;
        y|yes )
          is_yes=true
          ;;
        h|help )
          usage
          ;;
        * )
          ;;
      esac
    done
    do_teardown
    ;;
  troubleshoot )
    do_troubleshoot
    ;;
  test)
    do_test
    ;;
  * )
    usage
    ;;
esac

# all done, print the completion message
do_end
