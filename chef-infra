#!/bin/bash
# Author: Mike Tyler - mtyler - mtyler@chef.io
# Purpose: Stand up an Automate v2.0 evaluation environment

#
# include helper functions
#
. helpers.sh
#
# helper functions
#
usage() {
  echo "Usage: $0 [Sub Command] [options]"
  echo ""
  echo "Available Sub Commands:"
  echo "    setup | backup | log | restore | teardown | write"
  echo ""
  echo "  options:"
  echo "  -h,--help    show this message"
  echo ""
  echo "backup: create snapshots of Automate and Chef Server"
  echo ""
  echo "log: tail the Automate log"
  echo ""
  echo "restore: Restore to the latest backup, if one exists"
  echo "  options:"
  echo "  -a, --automate Directory in ./bkps/a2 containing Automate backup (default: latest modified)"
  echo "  -k, --keys Directory in ./bkps/keys containing backup of keys (default: latest modified)"
  echo "  -s, --server Directory in ./bkps/srvr containing Chef Server backup (default: latest modified)"
  echo ""
  echo "setup: Creat a local Chef Infrastructure"
  echo ""
  echo "  options:"
  echo "  -c, --count Number of nodes to create (integer, default: 2)"
  echo "  -b, --builder add an on-prem builder"
  echo "  -w, --workstation add a chef workstation"
  echo "  -x exclude infrastructure (Automate, Server, Nodes)"
  echo ""
  echo "teardown: Remove files and objects created"
  echo "  options:"
  echo "  -b,--backup  Create a backup before tearing down. Pointless to use with -f"
  echo "  -f,--full    Remove .deb packages. The process downloads and creates .deb"
  echo "               packages. For convienience and speed, these are not removed"
  echo "               by default."
  echo "  -p,--pretend just list what will be done"
  echo "  -y,--yes     answer yes to all prompts"
  echo ""
  echo "write: Create/overwrite local files: Vagrantfile,"
  echo "              knife.rb, base.rb, etc."
  echo ""
  echo "troubleshoot: Print useful cmds"

  exit 0;
}

do_config() {
  echo "Configuring configurator (./setup-files/chef-eval-setup.json)"
  sed -i -e "s/.*base_dir.*/  \"base_dir\": \"$(pwd | sed 's,/,\\/,g')\",/" setup-files/chef-eval-setup.json
  sed -i -e "s/.*run_user.*/  \"run_user\": \"$(id -un)\",/" setup-files/chef-eval-setup.json
  sed -i -e "s/.*run_group.*/  \"run_group\": \"$(id -gn)\",/" setup-files/chef-eval-setup.json
  echo "Creating local configuration items..."
  sudo chef-client -z -o "recipe[chef-eval-setup::setup_infra]" -j setup-files/chef-eval-setup.json
}
#
# set up managed nodes
# $1 = node count
setup_nodes() {
  echo "Setting up managed nodes..."
  for (( i=0; i<$1; i++ ))
  do
    if [ "$(vagrant status node1$i | grep 'running (virtualbox)')" == "" ];
    then
      vagrant up node1$i >/dev/tty 2>&1
    else
      echo "node1$i is running. Nothing to do here."
    fi
  done
  echo "Managed nodes set up complete."
}
#
# Begin setup
# the purpose of this file is to be the entry point for setting up a
# local test/evaluation environment for Chef Automate v2
#
setup_infra() {
  echo "Begin Chef Infrastructure setup..."

  echo "Bringing up Chef Server and Automate. If this environment is new, it will take some time..."
  # Check status of Automate
  a2_mode='provision'

  pids=""
  vagrant up a2 >/dev/tty 2>&1 &
  pids[0]=$!
  vagrant up srvr >/dev/tty 2>&1 &
  pids[1]=$!

  # wait for all pids
  for pid in ${pids[*]}; do
    wait $pid
  done
  if [ ! -f $WKDIR/a2-token ] ; then do_error "a2-token doesn't exist, setup was not successful"; fi
  echo "Automate and Chef Server set up complete."

  echo "Make compliance profiles available..."
  # This is an API call to Automate to make baseline profile available with an
  curl -d '{"name": "linux-baseline", "version": "2.2.0"}' -H "Content-Type: application/json" -H "api-token: $(<./a2-token)" -X POST 'https://automate-deployment.test/api/v0/compliance/profiles?owner=admin' --insecure
  #TODO check for error and print helpful message

  echo "Fetch ssl cert from Chef Server..."
  knife ssl fetch
  # upload cookbooks
  do_cookbook_upload $WKDIR "audit"
  # upload roles
  do_roles_upload $WKDIR "base.rb"
  setup_nodes $cnt
  do_infra_test
  # wrap up and repeat the user instructions that are buried in the logs
  echo "*******************************************************************"
  echo ""
  echo "To login to Chef Automate, use the following credentials"
  echo "  url = https://automate-deployment.test"
  echo "  username = admin"
  echo "  password = automate!"
  echo ""
  echo "cleanup using chef-infra teardown"
  echo ""
  echo "SSH to any running node with: vagrant ssh [node]"
  echo ""
  echo "Chef Infrastructure setup completed."
  echo "*******************************************************************"
}

setup_workstation() {
  vagrant up work
}

setup_builder() {
  vagrant up bldr
}


do_backup() {
  echo "Begin taking backups..."
  d=`date '+%Y%m%d%H%M%S'`
  mkdir -p $WKDIR/bkps/srvr
  mkdir -p $WKDIR/bkps/a2
  mkdir -p $WKDIR/bkps/keys
  # backup keys
  mkdir -p $WKDIR/bkps/keys/$d
  cp $WKDIR/.chef/*.pem $WKDIR/bkps/keys/$d
  # backup chef server
  vagrant ssh srvr -c "sudo /opt/opscode/embedded/bin/knife ssl fetch https://chef-server.test && sudo /opt/opscode/embedded/bin/knife ec backup ${GUEST_WKDIR}/bkps/srvr/${d} -s https://chef-server.test --user pivotal --key /etc/opscode/pivotal.pem"
  # configure automate for backup
# # # # # vagrant ssh a2 -c "if [ ! -f backup_config.toml ]; then sudo printf \"[global.v1.backups.filesystem]\npath = '${GUEST_WKDIR}/bkps/a2'\n\" > backup_config.toml && sudo ./chef-automate config patch backup_config.toml; fi"
  # backup automate
  vagrant ssh a2 -c "sudo ./chef-automate backup create"
  # copy files to synced_folder
  vagrant ssh a2 -c "sudo cp -Rfp /var/opt/chef-automate/backups/* $GUEST_WKDIR/bkps/a2  && sudo cp -Rfp /var/opt/chef-automate/backups/automate-elasticsearch-data $GUEST_WKDIR/bkps/a2"
  # keep a copy of the credentials file
  vagrant ssh a2 -c "sudo cat ./automate-credentials.toml > $GUEST_WKDIR/bkps/keys/$d/automate-credentials.toml"


  echo "Backups complete."
}

do_restore() {
  # there is NO validation that the backups are in sync
  # the assumption is that the last modified directories go together

  echo "Begin restore..."
  # check for cli arguments
  if [ "x$keys_bak" = "x" ]; then keys_bak=`ls -tr $WKDIR/bkps/keys | tail -1` ; fi
  if [ "x$srvr_bak" = "x" ]; then srvr_bak=`ls -tr $WKDIR/bkps/srvr | tail -1` ; fi
  if [ "x$a2_bak" = "x" ]; then a2_bak=`ls -tr $WKDIR/bkps/a2 | tail -1` ; fi
  echo "Restoring keys from: ${keys_bak}"
  echo "Restoring Chef Server from: ${srvr_bak}"
  echo "Restoring Automate from: ${a2_bak}"
  # validate backup directories exist
  if [ ! -d $WKDIR/bkps/keys/$keys_bak ]; then do_error "keys do not exist. Look in ${WKDIR}/keys and try again." ; fi
  if [ ! -d $WKDIR/bkps/srvr/$srvr_bak ]; then do_error "Chef Server Backup does not exist. Look in ${WKDIR}/bkps and try again." ; fi
  if [ ! -d $WKDIR/bkps/a2/$a2_bak ]; then do_error "Automate Backup does not exist. Look in ${WKDIR}/bkps and try again." ; fi
  # restore keys
  cp $WKDIR/bkps/keys/$keys_bak/*.pem $WKDIR/.chef
  # restore chef server
  vagrant ssh srvr -c "sudo /opt/opscode/embedded/bin/knife ssl fetch https://chef-server.test && sudo /opt/opscode/embedded/bin/knife ec restore ${GUEST_WKDIR}/bkps/srvr/${srvr_bak} -s https://chef-server.test --user pivotal --key /etc/opscode/pivotal.pem"
  # need to copy the backup files out of the vagrant synced_folder becuase the
  # deployment-service doesn't like
  vagrant ssh a2 -c "sudo cp -Rp $GUEST_WKDIR/bkps/a2/$a2_bak /var/opt/chef-automate/backups && sudo cp -Rp $GUEST_WKDIR/bkps/a2/automate-elasticsearch-data /var/opt/chef-automate/backups"
  # uninstall automate
  vagrant ssh a2 -c "sudo systemctl stop chef-automate && sudo pkill chef-automate"
  vagrant ssh a2 -c "sudo rm -rf /hab"
  vagrant ssh a2 -c "sudo userdel hab"
  # restore automate
  vagrant ssh a2 -c "sudo ./chef-automate backup restore $a2_bak"
  # reset the access_token
  mv $WKDIR/a2-token $WKDIR/a2-token.bak
  vagrant ssh a2 -c "sudo ./chef-automate admin-token > $GUEST_WKDIR/a2-token"
  vagrant ssh srvr -c "sudo chef-server-ctl set-secret data_collector token \$(< $GUEST_WKDIR/a2-token) && sudo chef-server-ctl restart nginx && sudo chef-server-ctl restart opscode-erchef"
  echo ""
  vagrant ssh a2 -c "sudo cat ./automate-credentials.toml"
  echo ""
  echo "Restore complete."
  #TODO redo the token
}

teardown_infra() {
  echo "Begin Chef Infrastructure teardown"
  if $is_pre ; then echo "-p specified. Only printing actions of this script..." ; fi
  # make sure user really wants to delete if they did
  # not pass cli argument -y
  if ! $is_yes ;
  then
    while true; do
      read -p "Do you really want to clean up? (y/n)" yn
      case $yn in
          [Yy]* ) break;;
          [Nn]* )
            echo "Ok. Stopping now."
            exit;;
          * ) echo "Please answer yes or no.";;
      esac
    done
  fi

  # Remove the hosts entries
  echo "Removing host entries from /etc/hosts..."
  sudo chef-client -z -o "recipe[chef-eval-setup::teardown_infra]" -j setup-files/chef-eval-setup.json

  if $is_full ; then
    echo "delete binaries ./chef-dk, *.deb and Backups..."
    if ! $is_pre ; then
      # directory containing compiled archlinux chef-dk package
      rm -rf ./pkgs
      rm -rf ./bkps
    fi
  fi
  echo "remove automate.license if present"
  if ! $is_pre ; then rm -f ./automate.license; fi
  echo "remove a2-token"
  if ! $is_pre ; then rm -f ./a2-token; fi
  echo "remove temp options file"
  if ! $is_pre ; then rm -f setup-files/chef-eval-setup.json-e; fi
  echo "remove nodes directory"
  if ! $is_pre ; then sudo rm -rf ./nodes; fi
    echo "remove nodes directory"
  if ! $is_pre ; then sudo rm -rf ./nodes; fi
  echo "remove vm configuration scripts..."
  if ! $is_pre ; then rm -rf ./scripts; fi
  echo "remove files from .chef..."
  if ! $is_pre ; then sudo rm -rf ./.chef; fi
  echo "remove ./roles dir..."
  if ! $is_pre ; then rm -rf ./roles; fi
  echo "remove ./bin dir..."
  if ! $is_pre ; then rm -rf ./logs; fi
  echo "remove ./tmp dir..."
  if ! $is_pre ; then rm -rf ./tmp; fi

  echo "vagrant destroy -f removing these vms..."
  vagrant status >/dev/tty 2>&1
  if ! $is_pre ; then vagrant destroy -f ; fi
  echo "remove Vagrantfile..."
  if ! $is_pre ; then rm -f ./Vagrantfile; fi
  echo "remove ./vagrant dir..."
  if ! $is_pre ; then rm -rf ./.vagrant; fi
  echo ""
  echo "Teardown of Chef Infrastructure complete. Thanks for playing... :)"
}

do_troubleshoot() {
  echo ""
  echo "Helpful troubleshooting"
  echo ""
  echo "View Automate Log: journalctl -u chef-automate"
  echo "Tail Automate Log: journalctl -u chef-automate -f"
}


#
# Begin chef-infra.sh
#
do_start
# initalize default flags
cnt=2
only_configs=false
is_full=false
is_yes=false
is_pre=false
is_bldr=false
is_work=false
is_infra=true

# parse command line
case $1 in
  setup )
    shift
    while getopts ":c:bhowx" o; do
      case $o in
        b|builder )
          is_bldr=true
          ;;
        c|count )
          cnt=$OPTARG
          shift
          ;;
        w|workstation )
          is_work=true
          ;;
        o|onlyconfig )
          only_configs=true
          is_infra=false
          ;;
        x )
          is_infra=false
          ;;
        h|help )
          usage
          ;;
        * )
          usage
          ;;
      esac
    done
    if [ "$only_configs" = true ]; then do_config; fi
    if [ "$is_infra" = true ]; then do_config; setup_infra; fi
    if [ "$is_work" = true ]; then setup_workstation; fi
    if [ "$is_bldr" = true ]; then setup_builder; fi
    ;;
  backup )
    shift
    do_backup
    ;;
  restore )
    shift
    while getopts ":s:a:h" o; do
      case $o in
        a|automate )
          a2_bak=$OPTARG
          shift
          ;;
        k|keys )
          keys_bak=$OPTARG
          shift
          ;;
        s|server )
          srvr_bak=$OPTARG
          shift
          ;;
        h|help )
          usage
          ;;
        * )
          usage
          ;;
      esac
    done
    do_restore
    ;;
  log )
    shift
    vagrant ssh a2 -c 'journalctl -u chef-automate -f'
    ;;
  teardown )
    shift
    while getopts ":bfpyh" o; do
      case $o in
        b|backup )
          do_backup
          ;;
        f|full )
          is_full=true
          ;;
        p|pretend )
          is_pre=true
          ;;
        y|yes )
          is_yes=true
          ;;
        h|help )
          usage
          ;;
        * )
          ;;
      esac
    done
    teardown_infra
    ;;
  troubleshoot )
    shift
    do_troubleshoot
    ;;
  test )
    shift
    do_test
    ;;
  write )
    shift
    do_build_recreate
    ;;
  * )
    shift
    usage
    ;;
esac

# all done, call end completion message
do_end
